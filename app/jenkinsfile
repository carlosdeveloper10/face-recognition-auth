pipeline {
    agent {
        label 'linux-mint'
    }

	environment {
        AGENT_PATH = '/home/carlos/Documents/jenkins/agents'
		CI_TOOLS = '/home/carlos/Documents/jenkins/ci-tools'
    }

	stages {
		stage('Show agent machine info and status') {
			steps {
			    sh 'echo list of enviromet variables'
			    sh 'env'
			    
			    sh 'echo agent machine attributes'
			    sh 'lscpu'
			    sh 'free -h'
			    sh 'dmesg | head -1'
			}
		}
		
		stage('Prepare to work'){
			steps {
    		    //The agent is provider by agent machine to avoid put the application.yml on GIT
		    	sh 'cp ${AGENT_PATH}/project/fra/application.yml ${WORKSPACE}/app/src/main/resources'
    		}
		}

	    stage('Unit test') {
		    steps {
		        dir("app"){
	    	   		sh 'mvn test'
	    	   		junit 'target/surefire-reports/TEST-*xml'
	   	    	}
		    }
    	}

		stage('SonarQube analysis') {
			steps {
				dir("app"){
					withSonarQubeEnv('sonarServer') {
						sh '${CI_TOOLS}/sonarqube-scanner/bin/sonar-scanner -Dsonar.settings'
					}
					timeout(time: 1, unit: 'HOURS') {
	                    waitForQualityGate abortPipeline: true
	                }
			    }
			}
		}
		
		stage('RESTful integration test'){
			steps {
			    dir("test/fra-restful-test"){
			    	sh 'docker run -td --name="pg-test" -e POSTGRES_PASSWORD=246810 -e POSTGRES_USER=carlos -e POSTGRES_DB=fra_db postgres'
	    			sh 'BD_IP=$(docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" pg-test)'
	    			sh 'mvn spring-boot:run -Dspring-boot.run.arguments="--spring.datasoruce=jdbc:postgresql://${BD_IP}/fra_db,--spring.datasource.username=carlos,--spring.datasource.password=246810,--server.port=5001"'
	    			sh 'docker rm -f pg-test'
	    		}
			}
		}

		
		stage('Deploy on stage'){
		
			parallel {
			    stage('Deploy on Dev') {
                   when {
                       branch 'develop'
                   }
					steps{
						sh 'mvn package' 
					    sh 'eb deploy FaceRecognitionAuthDev-env'
					}
                }
                
                stage('Deploy on Qa') {
                   when {
                       branch 'release/*'
                   }
					steps{
						sh 'mvn package' 
						sh 'eb deploy FaceRecognitionAuthDev-qa'
					}
                }
                
                stage('Deploy on Pro') {
                   when {
                       branch 'master'
                   }
				   steps{
				   		sh 'mvn package' 
					    sh 'eb deploy FaceRecognitionAuthDev-pro'
				   }
                }
			}

		}
	}
}
